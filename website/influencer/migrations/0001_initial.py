# Generated by Django 5.2.4 on 2025-07-19 11:21

import django.core.validators
import django.db.models.deletion
import django_ckeditor_5.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Name of the category (e.g., 'Lifestyle', 'Fashion')", max_length=100, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='Influencer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Full name of the influencer', max_length=255)),
                ('unique_id', models.CharField(blank=True, help_text="A unique identifier for the influencer (e.g., 'ID: 1224567')", max_length=50, null=True, unique=True)),
                ('bio', models.TextField(blank=True, help_text='A short biography or description of the influencer')),
                ('profile_image', models.ImageField(blank=True, help_text='Profile picture of the influencer', null=True, upload_to='influencer_profiles/')),
                ('type', models.CharField(choices=[('NANO', 'Nano (1k-10k followers)'), ('MICRO', 'Micro (10k-100k followers)'), ('MACRO', 'Macro (100k-1M followers)'), ('MEGA', 'Mega (1M+ followers)'), ('CALB', 'Celebrity/Brand (Large following, often public figures)')], default='MICRO', help_text='Category based on follower count or influence level', max_length=10)),
                ('followers_count', models.BigIntegerField(default=0, help_text='Total number of followers', validators=[django.core.validators.MinValueValidator(0)])),
                ('likes_count', models.BigIntegerField(default=0, help_text='Total number of likes across content', validators=[django.core.validators.MinValueValidator(0)])),
                ('views_count', models.BigIntegerField(default=0, help_text='Total number of views across content', validators=[django.core.validators.MinValueValidator(0)])),
                ('posts_count', models.IntegerField(default=0, help_text='Total number of posts/content pieces', validators=[django.core.validators.MinValueValidator(0)])),
                ('rating', models.DecimalField(decimal_places=1, default=0.0, help_text='Average rating of the influencer (out of 5.0)', max_digits=3, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('collaborations_count', models.IntegerField(default=0, help_text='Number of brand collaborations completed', validators=[django.core.validators.MinValueValidator(0)])),
                ('instagram_url', models.URLField(blank=True, help_text='Link to Instagram profile', null=True)),
                ('tiktok_url', models.URLField(blank=True, help_text='Link to TikTok profile', null=True)),
                ('youtube_url', models.URLField(blank=True, help_text='Link to YouTube channel', null=True)),
                ('twitter_url', models.URLField(blank=True, help_text='Link to Twitter profile', null=True)),
                ('blog_content', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Full blog content with rich text formatting (e.g., headings, images, tables)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('categories', models.ManyToManyField(blank=True, help_text='Categories or niches associated with the influencer', related_name='influencers', to='influencer.category')),
                ('user', models.OneToOneField(blank=True, help_text='The user account linked to this influencer profile (if claimed).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='influencer_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Content',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="Title of the content (e.g., 'Summer Outfit Ideas 2023')", max_length=255)),
                ('external_url', models.URLField(help_text='Direct link to the external content (YouTube, Instagram, etc.)', max_length=500)),
                ('thumbnail', models.ImageField(blank=True, help_text='Thumbnail image for the content.', null=True, upload_to='content_thumbnails/')),
                ('views_count', models.BigIntegerField(default=0, help_text='Number of views for this content.', validators=[django.core.validators.MinValueValidator(0)])),
                ('likes_count', models.BigIntegerField(default=0, help_text='Number of likes for this content.', validators=[django.core.validators.MinValueValidator(0)])),
                ('content_type', models.CharField(choices=[('VIDEO', 'Video'), ('IMAGE', 'Image'), ('SHORT', 'Short Video'), ('REEL', 'Reel'), ('POST', 'Text Post')], default='VIDEO', help_text='Type of content.', max_length=10)),
                ('published_date', models.DateField(blank=True, help_text='Date the content was published.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('influencer', models.ForeignKey(help_text='The influencer who created this content.', on_delete=django.db.models.deletion.CASCADE, related_name='contents', to='influencer.influencer')),
            ],
            options={
                'verbose_name_plural': 'Contents',
                'ordering': ['-published_date'],
            },
        ),
        migrations.CreateModel(
            name='Collaboration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('campaign_name', models.CharField(help_text="Name of the collaboration campaign (e.g., 'Sephora Summer Collection')", max_length=255)),
                ('external_url', models.URLField(help_text='Direct link to the external collaboration post or campaign page.', max_length=500)),
                ('thumbnail', models.ImageField(blank=True, help_text='Thumbnail image for the collaboration.', null=True, upload_to='collaboration_thumbnails/')),
                ('engagement_metric', models.CharField(blank=True, help_text="Metric showing engagement (e.g., '2.0M People Engaged')", max_length=100)),
                ('start_date', models.DateField(blank=True, help_text='Start date of the collaboration.', null=True)),
                ('end_date', models.DateField(blank=True, help_text='End date of the collaboration (optional).', null=True)),
                ('is_sponsored', models.BooleanField(default=True, help_text='Indicates if this is a sponsored collaboration.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('influencer', models.ForeignKey(help_text='The influencer involved in this collaboration.', on_delete=django.db.models.deletion.CASCADE, related_name='collaborations', to='influencer.influencer')),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='SuggestedInfluencerEdit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('suggested_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending Review'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], default='PENDING', help_text='Current status of the suggested edit.', max_length=10)),
                ('suggested_name', models.CharField(blank=True, help_text='Suggested new name for the influencer.', max_length=255, null=True)),
                ('suggested_bio', models.TextField(blank=True, help_text='Suggested new biography for the influencer.', null=True)),
                ('suggested_blog_content', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Suggested new blog content (rich text).', null=True)),
                ('admin_notes', models.TextField(blank=True, help_text='Notes from the admin regarding approval/rejection.')),
                ('influencer', models.ForeignKey(help_text='The influencer profile this edit suggestion is for.', on_delete=django.db.models.deletion.CASCADE, related_name='suggested_edits', to='influencer.influencer')),
                ('suggested_by', models.ForeignKey(blank=True, help_text='The user who submitted this suggestion.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Suggested Influencer Edit',
                'verbose_name_plural': 'Suggested Influencer Edits',
                'ordering': ['-suggested_at'],
            },
        ),
    ]
